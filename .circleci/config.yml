version: 2.1

orbs:
  # shellcheck: circleci/shellcheck@2.2.4
  go: circleci/go@1.7.0

executors:
  linux:
    docker:
      - image: cimg/go:1.16
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
  osx:
    macos:      
      xcode: 12.5.1
  windows:
    machine:
      image: "windows-server-2019-vs2019:stable"
      resource_class: windows.large
      shell: bash -eo pipefail

jobs:
  build-static:
    parameters:
      platform:
        description: The target for the build. Must be one of "linux", "osx", or "windows".
        type: enum
        enum: ["linux", "osx", "windows"]
        default: "linux"
    executor: << parameters.platform >>
    environment:
      EXPECT_LINK_INFO: static
    steps:
      - checkout
      # Add orb support for Windows go/install
      - unless:
          condition:
            equal: [ << parameters.platform >>, "windows" ]
          steps:
            - go/install:
                version: "1.16"
      # Using default go version 1.17 on Windows
      - run: go version
      - run: 
          name: Install librdkafka and other prerequisites
          command: |
            case << parameters.platform >> in
              osx)
                brew install librdkafka
                ;;
              linux)
                sudo apt-get update -q
                sudo apt-get install librdkafka-dev
                ;;
              windows)
                ./mk/setup-msys2-mingw64.sh
                export PATH=/C/tools/msys64/mingw64/bin:$PATH
                export MAKE=mingw32-make  # so that Autotools can find it
                ;;
            esac
      - run: rm -rf tmp-build
      - run: if [[ -n $BUILD_TYPE ]]; then bash mk/bootstrap-librdkafka.sh ${LIBRDKAFKA_VERSION} tmp-build ; fi
      - run: go get -u golang.org/x/lint/golint && touch .do_lint
      - when:
          condition:
            equal: [ << parameters.platform >>, "osx" ]
          steps:
            - run: 
                name: Add project GOPATH to $PATH
                command: echo "export PATH=$PATH:/Users/distiller/go/bin" >> $BASH_ENV
      - run: go mod init $CIRCLE_PROJECT_REPONAME
      - run: for dir in kafka examples ; do (cd $dir && go get $BUILD_TYPE ./...) ; done
      - run: for dir in kafka examples ; do (cd $dir && go install $BUILD_TYPE ./...) ; done
      - run: if [[ -f .do_lint ]]; then golint -set_exit_status ./examples/... ./kafka/... ./kafkatest/... ./soaktest/... ; fi
      - run: for dir in kafka ; do (cd $dir && go test -timeout 180s -v $BUILD_TYPE ./...) ; done
      - run: go-kafkacat --help
      - run: library-version
      - run: (library-version | grep "$EXPECT_LINK_INFO") || (echo "Incorrect linkage, expected $EXPECT_LINK_INFO" ; false)
  linux-build-dynamic:
    docker:
      - image: cimg/go:1.16
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    environment:
      EXPECT_LINK_INFO: dynamic
      BUILD_TYPE: -tags dynamic
      PKG_CONFIG_PATH: /home/circleci/project/tmp-build/lib/pkgconfig
      LD_LIBRARY_PATH: /home/circleci/project/tmp-build/lib
      DYLD_LIBRARY_PATH: /home/circleci/project/tmp-build/lib
      LIBRDKAFKA_VERSION: master
    steps:
      - checkout
      - run: go version
      - run: sudo apt-get update -q
      - run: sudo apt-get install librdkafka-dev
      - run: rm -rf tmp-build
      - run: if [[ -n $BUILD_TYPE ]]; then bash mk/bootstrap-librdkafka.sh ${LIBRDKAFKA_VERSION} tmp-build ; fi
      - run: bash mk/bootstrap-librdkafka.sh ${LIBRDKAFKA_VERSION} tmp-build
      - run: go get -u golang.org/x/lint/golint && touch .do_lint
      - run: go mod init $CIRCLE_PROJECT_REPONAME
      - run: for dir in kafka examples ; do (cd $dir && go get $BUILD_TYPE ./...) ; done
      - run: for dir in kafka examples ; do (cd $dir && go install $BUILD_TYPE ./...) ; done
      - run: if [[ -f .do_lint ]]; then golint -set_exit_status ./examples/... ./kafka/... ./kafkatest/... ./soaktest/... ; fi
      - run: for dir in kafka ; do (cd $dir && go test -timeout 180s -v $BUILD_TYPE ./...) ; done
      - run: go-kafkacat --help
      - run: library-version
      - run: (library-version | grep "$EXPECT_LINK_INFO") || (echo "Incorrect linkage, expected $EXPECT_LINK_INFO" ; false)

workflows:
  build-and-test:
    jobs:
      # - shellcheck/check
      - linux-build-dynamic
      - build-static:
          matrix:
            parameters:
              platform: ["linux", "osx", "windows"]
