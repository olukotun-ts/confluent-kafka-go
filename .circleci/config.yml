version: 2.1

workflows:
  build-and-test:
    jobs:
      # - shellcheck/check
      - build-static:
          matrix:
            parameters:
              go_version: ["1.16"]
              platform: ["windows"]

orbs:
  # shellcheck: circleci/shellcheck@2.2.4
  go: circleci/go@1.7.0
  wingo:
    commands:
        # Verify check for "Binary already exists, skipping download."
        # Test sourcing $BASH_ENV from Powershell
        install:
            parameters:
                cache:
                    default: true
                    description: Whether or not to cache the binary.
                    type: boolean
                cache-key:
                    default: v2
                    description: |
                        String to use in cache key. Typically overriden when needed to bust cache.
                    type: string
                compiler-src:
                    default: msys2
                    description: Package to install to provide gcc
                    type: string
                version:
                    default: 1.16.5
                    description: The Go version.
                    type: string
            steps:
                - when:
                    condition:
                        equal:
                            - <<parameters.cache>>
                            - true
                    steps:
                        # - run:
                        #     command: |
                        #         $SUDO rm -rf /usr/local/go
                        #         $SUDO mkdir -p /usr/local/go
                        #         $SUDO chown -R $(whoami): /usr/local/go
                        #     name: Prep cache restore
                        - restore_cache:
                            keys:
                                - go-binary-<<parameters.cache-key>>-<<parameters.version>>-{{ arch }}
                - run:
                    command: |
                        if [[ -z "$OSD_FAMILY" ]]; then
                          OSD_FAMILY=$(echo $OS | tr '[:upper:]' '[:lower:]' | cut -d'_' -f 1)
                          HOSTTYPE=$(echo $PROCESSOR_ARCHITECTURE | tr '[:upper:]' '[:lower:]')

                          srcfile="go<< parameters.version >>.${OSD_FAMILY}-${HOSTTYPE}.zip"
                          dstdir=/usr/local/
                          mkdir -p $dstdir
                          cd $dstdir

                          echo "Downloading $srcfile to $dstdir"

                          curl --fail --location -sS "https://dl.google.com/go/$srcfile" -O
                          unzip $srcfile

                          case << parameters.compiler-src >> in
                            msys2)
                              [[ ! -f C:/tools/msys64/msys2_shell.cmd ]] && rm -rf C:/tools/msys64
                              if [[ $(choco search --local-only mingw | grep "mingw") ]]
                              then
                                  choco uninstall -y mingw
                              fi
                              choco upgrade --no-progress -y msys2
                              export msys2='cmd //C RefreshEnv.cmd '
                              export msys2+='& set MSYS=winsymlinks:nativestrict '
                              export msys2+='& C:\\tools\\msys64\\msys2_shell.cmd -defterm -no-start'
                              export mingw64="$msys2 -mingw64 -full-path -here -c "\"\$@"\" --"
                              export msys2+=" -msys2 -c "\"\$@"\" --"
                              $msys2 pacman --sync --noconfirm --needed mingw-w64-x86_64-toolchain
                              compiler_path=/C/tools/msys64/mingw64/bin
                              ;;
                          esac

                          echo "export PATH=$compiler_path:$dstdir/go/bin:$PATH" >> $BASH_ENV

                          exit 0
                        fi

                        : ${OSD_FAMILY:="linux"}
                        : ${HOSTTYPE:="amd64"}
                        if [ "${HOSTTYPE}" = "x86_64" ]; then HOSTTYPE="amd64"; fi
                        case "${HOSTTYPE}" in *86 ) HOSTTYPE=i386 ;; esac

                        if command -v go >/dev/null; then
                          if go version | grep -q -F "go<< parameters.version >> "; then
                            echo "Binary already exists, skipping download."
                            exit 0
                          fi

                          echo "Found a different version of Go."
                          OSD_FAMILY="$(go env GOHOSTOS)"
                          HOSTTYPE="$(go env GOHOSTARCH)"

                          $SUDO rm -rf /usr/local/go
                          $SUDO install --owner=${USER} -d /usr/local/go
                        fi

                        echo "Installing the requested version of Go."

                        curl --fail --location -sS "https://dl.google.com/go/go<< parameters.version >>.${OSD_FAMILY}-${HOSTTYPE}.tar.gz" \
                        | sudo tar --no-same-owner --strip-components=1 --gunzip -x -C /usr/local/go/

                        echo "export PATH=$PATH:/usr/local/go/bin" >> $BASH_ENV
                        $SUDO chown -R $(whoami): /usr/local/go
                    name: Install Go
                - run:
                    command: echo "Installed " && go version
                    name: Verify Go Installation
                - when:
                    condition:
                        equal:
                            - <<parameters.cache>>
                            - true
                    steps:
                        - save_cache:
                            key: go-binary-<<parameters.cache-key>>-<<parameters.version>>-{{ arch }}
                            paths:
                                - /usr/local/go
        load-cache:
            description: Load cached Go modules.
            parameters:
                key:
                    default: go-mod
                    description: The cache key to use. The key is immutable.
                    type: string
            steps:
                - restore_cache:
                    keys:
                        - << parameters.key >>-{{ arch }}-{{ checksum "go.sum"  }}
        mod-download:
            description: Run 'go mod download'.
            steps:
                - run:
                    command: go mod download
                    name: go mod download
        mod-download-cached:
            description: Download and cache Go modules
            steps:
                - load-cache
                - mod-download
                - save-cache
        save-cache:
            description: Save Go modules to cache.
            parameters:
                key:
                    default: go-mod
                    description: The cache key to use. The key is immutable.
                    type: string
                path:
                    default: /home/circleci/go/pkg/mod
                    description: Path to cache.
                    type: string
            steps:
                - save_cache:
                    key: << parameters.key >>-{{ arch }}-{{ checksum "go.sum"  }}
                    paths:
                        - << parameters.path >>
        test:
            description: |
                Runs 'go test ./...' but includes extensive parameterization for finer tuning
            parameters:
                count:
                    default: "1"
                    description: run each test and benchmark n times
                    type: string
                covermode:
                    default: set
                    description: |
                        flag to set the coverage mode
                        (the go default is: "set", unless -race is enabled, in which case the go default is "atomic")
                    enum:
                        - set
                        - count
                        - atomic
                    type: enum
                coverpkg:
                    default: ./...
                    description: |
                        Apply coverage analysis in each test to packages matching the patterns.
                        (Sets -cover.)
                    type: string
                coverprofile:
                    default: cover-source.out
                    description: file to save coverage profile
                    type: string
                failfast:
                    default: false
                    description: do not start new tests after the first test failure
                    type: boolean
                packages:
                    default: ./...
                    description: Import tests to run, by path glob.
                    type: string
                parallel:
                    default: "1"
                    description: |
                        Allow parallel execution of test functions that call t.Parallel.
                        The value of this flag is the maximum number of tests to run
                        simultaneously
                    type: string
                race:
                    default: false
                    description: |
                        run tests with -race option
                        (if enabled, update covermode to be "atomic")
                    type: boolean
                short:
                    default: false
                    description: tell long-running tests to shorten their run time
                    type: boolean
                verbose:
                    default: false
                    description: log all tests as they are run. Also print all text from Log and Logf calls even if the test succeeds.
                    type: boolean
            steps:
                - run:
                    command: go test <<# parameters.race >>-race<</ parameters.race >> -count=<<parameters.count>> -coverprofile=<<parameters.coverprofile>> <<# parameters.failfast >>-failfast<</ parameters.failfast >> <<# parameters.short >>-short<</ parameters.short >> -p <<parameters.parallel>> -covermode=<<parameters.covermode>> <<# parameters.verbose >>-v<</ parameters.verbose >> <<parameters.packages>> -coverpkg=<<parameters.coverpkg>>
                    name: go test

# Test resource classes
executors:
  linux:
    docker:
      - image: cimg/go:1.16
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    resource_class: large
  osx:
    macos:      
      xcode: 12.5.1
      resource_class: macos.x86.medium.gen2
  windows:
    machine:
      image: "windows-server-2019-vs2019:stable"
      # Verify docs for Windows resource_class
      resource_class: windows.large
      shell: bash -eo pipefail

jobs:
  build-static:
    parameters:
      go_version:
        description: Version of Go to use
        type: string
        default: "1.16"
      platform:
        description: The target for the build. Must be one of "linux", "osx", or "windows".
        type: enum
        enum: ["linux", "osx", "windows"]
        default: "linux"
    executor: << parameters.platform >>
    environment:
      EXPECT_LINK_INFO: static
    steps:
      - checkout
      # Add orb support for Windows go/install
      - unless:
          condition:
            equal: [ << parameters.platform >>, "windows" ]
          steps:
            - go/install:
                version: << parameters.go_version >>
      - when:
          condition:
            equal: [ << parameters.platform >>, "windows" ]
          steps:
            - wingo/install:
                version: << parameters.go_version >>
      - when:
          condition:
            equal: [ << parameters.platform >>, "osx" ]
          steps:
            - run:
                name: Set up environment for mac
                command: |
                  if [[ "$(uname -s)" == Darwin ]]; then
                    echo 'export PATH="/Users/distiller/go/bin:$PATH"' >> $BASH_ENV
                  fi
      - run: go get -u golang.org/x/lint/golint && touch .do_lint
      - run: go mod init github.com/confluentinc/confluent-kafka-go
      - run: for dir in kafka examples ; do (cd $dir && go get $BUILD_TYPE ./...) ; done
      - run: for dir in kafka examples ; do (cd $dir && go install $BUILD_TYPE ./...) ; done
      - run: if [[ -f .do_lint ]]; then golint -set_exit_status ./examples/... ./kafka/... ./kafkatest/... ./soaktest/... ; fi
      - run: for dir in kafka ; do (cd $dir && go test -timeout 180s -v $BUILD_TYPE ./...) ; done
      - run: go-kafkacat --help
      - run: library-version
      - run: (library-version | grep "$EXPECT_LINK_INFO") || (echo "Incorrect linkage, expected $EXPECT_LINK_INFO" ; false)
  build-dynamic:
    parameters:
      go_version:
        description: Version of Go to use
        type: string
        default: "1.16"
      platform:
        description: The target for the build. Must be one of "linux", or "osx".
        type: enum
        enum: ["linux", "osx"]
        default: "linux"
    executor: << parameters.platform >>
    environment:
      EXPECT_LINK_INFO: dynamic
      BUILD_TYPE: -tags dynamic
      LIBRDKAFKA_VERSION: master
      PKG_CONFIG_PATH: /usr/local/lib/pkgconfig
      LD_LIBRARY_PATH: /usr/local/lib
      DYLD_LIBRARY_PATH: /usr/local/lib
    steps:
      - checkout
      - go/install:
          version: << parameters.go_version >>
      - when:
          condition:
            equal: [ << parameters.platform >>, "osx" ]
          steps:
            - run:
                name: Set up environment for mac
                command: |
                  if [[ "$(uname -s)" == Darwin ]]; then
                    echo 'export PATH="/Users/distiller/go/bin:/usr/local/opt/openssl/bin:$PATH"' >> $BASH_ENV
                    echo 'export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/usr/local/opt/openssl/lib/pkgconfig"' >> $BASH_ENV
                    brew update
                    brew install pkg-config
                  fi
      - run: if [[ -n $BUILD_TYPE ]]; then sudo bash mk/bootstrap-librdkafka.sh ${LIBRDKAFKA_VERSION} /usr/local ; fi
      - run: go get -u golang.org/x/lint/golint && touch .do_lint
      - run: go mod init github.com/confluentinc/confluent-kafka-go
      - run: for dir in kafka examples ; do (cd $dir && go get $BUILD_TYPE ./...) ; done
      - run: for dir in kafka examples ; do (cd $dir && go install $BUILD_TYPE ./...) ; done
      - run: if [[ -f .do_lint ]]; then golint -set_exit_status ./examples/... ./kafka/... ./kafkatest/... ./soaktest/... ; fi
      - run: for dir in kafka ; do (cd $dir && go test -timeout 180s -v $BUILD_TYPE ./...) ; done
      - run: go-kafkacat --help
      - run: library-version
      - run: (library-version | grep "$EXPECT_LINK_INFO") || (echo "Incorrect linkage, expected $EXPECT_LINK_INFO" ; false)
  